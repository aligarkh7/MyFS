import java.io.*;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

public class MyFile {
    public static void listDirectory(String path) {
        File directoryPath = new File(path);
        if (directoryPath.exists()) {
            if (directoryPath.isDirectory()) {
                String contents[] = directoryPath.list();
                for (int i = 0; i < contents.length; i++) {
                    System.out.print(contents[i] + " ");
                }
            } else {
                System.out.print("файл не может быть директорией");
            }
        } else {
            System.out.print("директория отсутствует");
        }
        System.out.println();
    }

    public static void listPythonFiles(String path) {
        File file = new File(path);
        if (file.exists()) {
            if (file.isDirectory()) {
                for (File filePy : file.listFiles()) {
                    if (filePy.getName().contains(".py")) {
                        System.out.print(filePy.getName() + " ");
                    }
                }
            } else {
                System.out.print("файл не может быть директорией");
            }
        } else {
            System.out.print("директория отсутствует");
        }
        System.out.println();
    }

    public static void isDirectory(String path) {
        File pathIsDirectory = new File(path);
        if (pathIsDirectory.exists()) {
            System.out.println(pathIsDirectory.isDirectory());
        } else {
            System.out.println("директория отсутствует");
        }

    }

    public static void define(String path) {
        File pathIsDirectory = new File(path);
        if (pathIsDirectory.exists()) {
            if (pathIsDirectory.isDirectory()) {
                System.out.println("директория");
            } else {
                System.out.println("файл");
            }
        } else {
            System.out.println("директория или файл отсутствует");
        }
    }

    public static void printPermissions(String path) {
        File file = new File(path);
        if (file.exists()) {
            System.out.print(file.canRead() ? "r" : "-");
            System.out.print(file.canWrite() ? "w" : "-");
            System.out.print(file.canExecute() ? "x" : "-");
        } else {
            System.out.print("директория или файл отсутствует");
        }
        System.out.println();
    }

    public static void setPermissions(String path, String permissions) {
        File file = new File(path);
        if (file.exists()){
            if (
                    (permissions.charAt(0) == 'r' || permissions.charAt(0) == '-') &&
                            (permissions.charAt(1) == 'w' || permissions.charAt(1) == '-') &&
                            (permissions.charAt(2) == 'x' || permissions.charAt(2) == '-')
            ) {

                file.setReadable(false);
                file.setWritable(false);
                file.setExecutable(false);

                file.setReadable(permissions.charAt(0) == 'r');
                file.setWritable(permissions.charAt(1) == 'w');
                file.setExecutable(permissions.charAt(2) == 'x');

            }else {
                System.out.println("""
                        Неверный Ввод
                        Для корректного ввода примеры ниже:
                        rwx :   полный доступ Read Write Execute;
                        r-- :   только Read;
                        -w- :   только Write;
                        --x :   только Execute;
                        --- :   полный запрет Read Write Execute;
                        rw- , r-x итд.
                        """);
            }
        }else {
            System.out.println("директория или файл отсутствует");
        }
    }

    public static void printContent(String path) {
        File file = new File(path);
        try {
            if (file.exists()){
                if (!file.isDirectory()){
                    Scanner lines = new Scanner(file);
                    while (lines.hasNextLine()){
                        System.out.println(lines.nextLine());
                    }
                }else {
                    System.out.println("каталог не может быть файлом");
                }
            }else {
                System.out.println("директория или файл отсутствует");
            }
        }catch (Exception e){
            System.out.println(e);
        }
    }

    public static void appendFooter(String path) {
        File file = new File(path);
        if (file.exists()){
            if (!file.isDirectory()){
                try {
                    BufferedWriter writer = new BufferedWriter(new FileWriter(file.getAbsolutePath(),true));
                    writer.append("# Autogenerated line");
                    writer.close();
                }catch (Exception e){
                    System.out.println(e);
                }
            }else {
                System.out.println("каталог не может быть файлом");
            }
        }else {
            System.out.println("директория или файл отсутствует");
        }
    }

    public static void createBackup(String path) {
        File source = new File(path);
        try {
            if (source.exists()) {
                java.time.LocalDate currentDate = java.time.LocalDate.now();
                if (source.isDirectory()) {
                    File destination = new File("/tmp/" + currentDate.format(DateTimeFormatter.ofPattern("dd-MM-yyyy")) + ".backup");
                    destination.mkdir();
                    copyDirectoryCompatibityMode(source, destination);
                } else {
                    File destination = new File("/tmp/" + currentDate.format(DateTimeFormatter.ofPattern("dd-MM-yyyy")) + ".backup");
                    destination.mkdir();
                    File destinationf = new File(destination, source.getName());
                    copyFile(source, destinationf);
                }
            } else {
                System.out.println("директория или файл отсутствует");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private static void copyDirectory(File sourceDirectory, File destinationDirectory) throws IOException {
        if (!destinationDirectory.exists()) {
            destinationDirectory.mkdir();
        }
        for (String f : sourceDirectory.list()) {
            copyDirectoryCompatibityMode(new File(sourceDirectory, f), new File(destinationDirectory, f));
        }
    }

    public static void copyDirectoryCompatibityMode(File source, File destination) throws IOException {
        if (source.isDirectory()) {
            copyDirectory(source, destination);
        } else {
            copyFile(source, destination);
        }
    }

    private static void copyFile(File sourceFile, File destinationFile) throws IOException {
        try (InputStream in = new FileInputStream(sourceFile); OutputStream out = new FileOutputStream(destinationFile)) {
            byte[] buf = new byte[1024];
            int length;
            while ((length = in.read(buf)) > 0) {
                out.write(buf, 0, length);
            }
        }
    }

    public static void printLongestWord(String path) {
        File file = new File(path);
        if (file.exists()){
            if (!file.isDirectory()){
                try {
                    Scanner in = new Scanner(file);
                    String longestWord = "";
                    while (in.hasNextLine()){
                        for (String str:in.nextLine().replaceAll("[.:, /;]","\n").lines().toList()){
                            if (str.length()>longestWord.length()){
                                longestWord = str;
                            }
                        }
                    }
                    System.out.println(longestWord);
                }catch (Exception e){
                    System.out.println(e);
                }
            }else {
                System.out.println("каталог не может быть файлом");
            }
        }else {
            System.out.println("директория или файл отсутствует");
        }
    }

    public static void help() {
        System.out.print("""
                MyFS 1.0 команды:
                ls <path>               выводит список всех файлов и директорий для `path`
                ls_py <path>            выводит список файлов с расширением `.py` в `path`
                is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`
                define <path>           выводит `директория` или `файл` в зависимости от типа `path`
                readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя
                setmod <path> <perm>    устанавливает права для файла `path`
                cat <path>              выводит контент файла
                append <path>           добавляет строку `# Autogenerated line` в конец `path`
                bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`
                greplong <path>         выводит самое длинное слово в файле
                help                    выводит список команд и их описание
                exit                    завершает работу программы
                """);
    }

    public static void exit() {
        System.out.println("Goodbye");
    }
}
